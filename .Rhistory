#names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
)
my_who_long <- who %>%
pivot_longer(!c(country, iso2, iso3, year),
names_to = "code",
values_to = "count",)
View(who)
View(my_who_long)
View(my_who_long)
test = str_split('new_?(.*)_(.)(.*)',my_who_long$code)
str_split('new_?(.*)_(.)(.*)',my_who_long$code)
?str_split
stringr::str_split('new_?(.*)_(.)(.*)',my_who_long$code)
View(who2)
library(tidyr)
data(who)
data(population)
who2 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
)
View(who2)
View(my_who_long)
View(who2)
strsplit('new_?(.*)_(.)(.*)',my_who_long$code)
strsplit(my_who_long$code,'new_?(.*)_(.)(.*)')
test = strsplit(my_who_long$code,'new_?(.*)_(.)(.*)')
test = stringr::str_split(my_who_long$code,'new_?(.*)_(.)(.*)')
test = stringr::str_split(string=my_who_long$code,pattern='new_?(.*)_(.)(.*)')
test = stringr::str_split(pattern='new_?(.*)_(.)(.*)',string=my_who_long$code)
test = stringr::str_split('new_?(.*)_(.)(.*)',my_who_long$code)
test = stringr::str_split('new_?(.*)_(.)(.*)',my_who_long$code)
?strsplit
strsplit('new_?(.*)_(.)(.*)',my_who_long$code,perl=TRUE)
test = strsplit('new_?(.*)_(.)(.*)',x=my_who_long$code,perl=TRUE)
test = strsplit(my_who_long$code,'new_?(.*)_(.)(.*)',perl=TRUE)
?pivot_longer
?separate
separate(my_who_long$code,'new_?(.*)_(.)(.*)')
separate(my_who_long,code,'new_?(.*)_(.)(.*)')
separate(my_who_long,code,'new_?(.*)_(.)(.*)', into= c('col1','col2','col3'))
myf <- function(x) {
innerf <- function(x) assign('Global.res', x^2, envir = .GlobalEnv)
innerf(x+1)
}
myf(3)
myf(3)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
f
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
f(5)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(5)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
g(3)
gc()
x <- 10
y <- 5
z <- 12
#your code below
(x < z) > y
sales_df <- read.delim("Week_2/Data/sales_pipe.txt",sep="|",stringsAsFactors = FALSE)
sales_df <- read.delim("Week_2/Data/sales_pipe.txt",sep="|",stringsAsFactors = FALSE)
View(sales_df)
dim(sales_df)
sales_df <- read.delim("Week_2/Data/sales_pipe.txt",sep="|",stringsAsFactors = FALSE)
View(sales_df)
sales_df$Product.Name[549]
sales_df <- read.delim("Week_2/Data/sales_pipe.txt",sep="\\|",stringsAsFactors = FALSE)
sales_df$Product.Name[549]
sales_df <- read.delim("Week_2/Data/sales_pipe.txt",sep="\\|",stringsAsFactors = FALSE)
?read.delim
sales_df <- read.table("Week_2/Data/sales_pipe.txt",sep="|",stringsAsFactors = FALSE)
sales_df <- read.csv("Week_2/Data/sales_pipe.txt",sep="|",stringsAsFactors = FALSE)
sales_df <- read.delim2("Week_2/Data/sales_pipe.txt",sep="|",stringsAsFactors = FALSE)
sales_df <- read.delim2("Week_2/Data/sales_pipe.txt",sep="|",stringsAsFactors = FALSE,fill=TRUE)
sales_df <- read.table("Week_2/Data/sales_pipe.txt",sep="|",stringsAsFactors = FALSE,fill=TRUE)
sales_df <- read.csv("Week_2/Data/sales_pipe.txt",sep="|",stringsAsFactors = FALSE,fill=TRUE)
sales_df <- read.delim("Week_2/Data/sales_pipe.txt",sep="|",stringsAsFactors = FALSE,fill=TRUE)
View(sales_df$Product.Name[549])
sales_df$Product.Name[549]
sales_df <- read.delim("Week_2/Data/sales_pipe.txt",sep=" |",stringsAsFactors = FALSE,fill=TRUE)
sales_df <- read.delim("Week_2/Data/sales_pipe.txt",sep="| ",stringsAsFactors = FALSE,fill=TRUE)
fib  <- function(n)
{
if (length(n) > 1) return(sapply(n, fib))
if (n == 1) return(1)
if (n == 2) return(1)
return(fib(n-1)+fib(n-2))
}
catalan <- function(n) {
cat <- vector("numeric", length(max(n)) + 1)
for (i in 0:max(n)) {
if (i == 0) {
cat[i+1] <- 1
} else {
cat[i+1] <- ((4*i - 2)*cat[i])/(i + 1)
}
}
return(cat[n + 1])
}
fib_vec <- fib(1:10)
which(fib_vec == 8) #return the indices where fib_vec equals 8
which.max(fib_vec) #return the indices wher the maximum value exists
which.min(fib_vec) #return the indices wher the minimum value exists
# Elements are arranged sequentially by row.
M <- matrix(c(3:14), nrow = 4, byrow = TRUE)
print(M)
test_vector <- c(1,5,11:22)
#your code below
?any
#your code below
x <- 10
y <- 5
z <- 20
test_vector <- c(1,5,11:22)
#your code below
test_vector <- c(1,5,11:22)
#your code below
any((x,y,z) %in% test_vector)
test_vector <- c(1,5,11:22)
#your code below
any((x %in% test_vector)
test_vector <- c(1,5,11:22)
#your code below
any(x %in% test_vector)
test_vector <- c(1,5,11:22)
#your code below
any((x %in% test_vector),(y %in% test_vector))
test_vector <- c(1,5,11:22)
#your code below
any((x %in% test_vector),(y %in% test_vector),(z %in% test_vector))
#your code below
x + 2y == z
#your code below
x + 2*y == z
#your code below
(x == test_vector)
(y == test_vector)
(z == test_vector)
#your code below
any((x == test_vector),(y == test_vector),(z == test_vector))
#your code below
((x == test_vector),(y == test_vector),(z == test_vector))
#your code below
c((x == test_vector),(y == test_vector),(z == test_vector))
#your code below
(x == test_vector)+(y == test_vector)+(z == test_vector))
#your code below
(x == test_vector)+(y == test_vector)+(z == test_vector)
#your code below
c((x == test_vector),(y == test_vector),(z == test_vector))
#your code below
(x == test_vector)+(y == test_vector)+(z == test_vector)
#your code below
test_vector[(x == test_vector)+(y == test_vector)+(z == test_vector)]
#your code below
test_vector[(x == test_vector)|(y == test_vector)|(z == test_vector)]
#your code below
(x<z)&(x>y)
#your code here
(x != z) & (y != z)
#your code below
x <- 10
y <- 5
z <- 20
#your code below
(x + (2*y)) == z
(x %in% test_vector)
(x == test_vector)
(y == test_vector)
(y != z)
(x != z)
#your code here
(x != z) | (y != z)
test_vector <- c(1,5,11:22)
#your code below
(x %in% test_vector)|(y %in% test_vector)|(z %in% test_vector))
test_vector <- c(1,5,11:22)
#your code below
(x %in% test_vector)|(y %in% test_vector)|(z %in% test_vector)
(x == test_vector)
fib  <- function(n)
{
if (length(n) > 1) return(sapply(n, fib))
if (n == 1) return(1)
if (n == 2) return(1)
return(fib(n-1)+fib(n-2))
}
catalan <- function(n) {
cat <- vector("numeric", length(max(n)) + 1)
for (i in 0:max(n)) {
if (i == 0) {
cat[i+1] <- 1
} else {
cat[i+1] <- ((4*i - 2)*cat[i])/(i + 1)
}
}
return(cat[n + 1])
}
fib_vec <- fib(1:10)
c("a",1)
c("a",1.0)
fib  <- function(n)
{
if (length(n) > 1) return(sapply(n, fib))
if (n == 1) return(1)
if (n == 2) return(1)
return(fib(n-1)+fib(n-2))
}
catalan <- function(n) {
cat <- vector("numeric", length(max(n)) + 1)
for (i in 0:max(n)) {
if (i == 0) {
cat[i+1] <- 1
} else {
cat[i+1] <- ((4*i - 2)*cat[i])/(i + 1)
}
}
return(cat[n + 1])
}
fib_vec <- fib(1:10)
1:10
fib_vec[0]
fib_vec[1]
fib_vec[5]
fib_vec[10]
fib_vec[c(1,5,10)]
which(fib_vec == 8)
which.max(fib_vec)
#initilize catalan vector
catalan_vec <- catalan(1:10)
fib_vec + catalan_vec#vector addition
any(catalan_vec==1)
all(catalan_vec==1)
?sort
length(catalan_vec)
rep(catalan_vec,2)
seq(from=1,to=10,by=2)
?seq
# Elements are arranged sequentially by row.
M <- matrix(c(3:14), nrow = 4, byrow = TRUE)
print(M)
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
print(N)
emp.data <- data.frame(
emp_id = c(1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
### Creating data frames by reading a file
# Read csv files (comma separated value)
sales_csv <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
# Read tab delimited files "\t" or any other file that is delimited
sales_tab_delim <- read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
# Read excel sheets
sales_excel <- readxl::read_excel("Week_2/Data/sales.xlsx"
,sheet = "sales"
)
# Summarize the data
summary(sales_csv)
str(sales_csv)
View(sales_csv)
temp_char <- stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='-',n=3)
View(temp_char)
type(temp_char)
class(temp_char)
cat(
sales_csv$Product.ID[1]
,sales_csv$Product[1]
,sales_csv$Product.Number[1]
,sep="\n\r"
)
View(temp_char)
str(temp_char)
test <- sales_csv
test <- cbind(test,temp_char)
View(test)
?cbind
sales_csv$Product <- paste(temp_char[,1], temp_char[,2],sep='-')
sales_csv$Product.Number <- temp_char[,3]
View(sales_csv)
View(temp_char)
cat(
sales_csv$Product.ID[1]
,sales_csv$Product[1]
,sales_csv$Product.Number[1]
,sep="\n\r"
)
sales_csv[1,sales_csv$Customer.Name]
sales_csv[1,sales_csv$Product]
sales_csv[1,"Product"]
unique(sales_csv$Region)
sales_csv$Region <- factor(sales_csv$Region)
levels(sales_csv$Region)
table(sales_csv$Region)
barplot(table(sales_csv$Region))
sales_csv$Region <- factor(sales_csv$Region
,levels=c('West','East','Central','South')
)
barplot(table(sales_csv$Region))
?as.Date
sales_csv[1:10,5]
first_class_df = sales_csv[(sales_csv$Ship.Mode=='First Class')|(sales_csv$City=='Henderson') ,]
View(first_class_df)
?matrix
# Create a list containing strings, numbers, vectors and a logical values.
list_data <- list("Male", "Female", c(35,42,5), FALSE, 220.5,
read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
)
list_data[[1]]
list_data[[6]]$City[1]
# Your code here
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
?read.delim
# Your code here
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
# Your code here
#your code below
x <- 10
y <- 5
z <- 20
z|| y || x %in% test_vector
#this is your notepad/scratchpad
x <- 10
y <- 20
x * y
#this is your notepad/scratchpad
x <- 10
y <- 20
x * y
#this is your notepad/scratchpad
x = 10
y = 20
x * y
library(dplyr)
detach("package:dplyr", unload = TRUE)
?ggplot2
library(ggplot2)
?ggplot2
?geom_line
myf <- function(x) {
innerf <- function(x) assign('Global.res', x^2, envir = .GlobalEnv)
innerf(x+1)
}
myf(3)
myf <- function(x) {
innerf <- function(x) assign('Global.res', x^2, envir = .GlobalEnv)
innerf(x+1)
}
myf(3)
myf <- function(x) {
innerf <- x^2
print(innerf)
}
myf(3)
myf <- function(x) {
innerf <- x^2
innerf(x+1)
}
myf(3)
myf <- function(x) {
x <- x^2
print(x)
}
myf(3)
myf <- function(x) {
innerf <- function(x) assign('Global.res', x^2, envir = .GlobalEnv)
innerf(x+1)
}
myf(3)
myf <- function(x) {
innerf <- function(x) assign('x', x^2, envir = .GlobalEnv)
innerf(x+1)
}
myf(3)
myf <- function(x) {
x <- x^2
print(x)
}
myf(3)
myf <- function(x) {
x <- x^2
print(x)
}
myf(3)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(y)
x*y
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
g
g(y)
f(y)
x <- 10
y <- 2
test_vector <- c(2,5,6)
x %in% test_vector
y %in% test_vector
x %in% test_vector | y %in% test_vector
x %in% test_vector & y %in% test_vector
x == test_vector
y == test_vector
test_vector[y == test_vector]
test_vector[y == test_vector]
test_vector[y != test_vector]
y != test_vector
test_vector[]
z <- 6
test_vector[(x==test_vector)|(y==test_vector)|(z==test_vector)]
test_vector[x== test_vector] | test_vector[y== test_vector]
test_vector[y== test_vector]
test_vector[x== test_vector]
test_vector[x== test_vector] | test_vector[y== test_vector]
test_vector[x== test_vector] & test_vector[y== test_vector]
#your code below
x <- 10
y <- 5
z <- 20
?function
(0)
?function
()
g(5)
g <- function(var) {
var*y#
}
g(5)
y <- 10 #this is a global variable
g(5)
g(6)
View(g)
x <- 10
y <- 2
test_vector <- c(2,5,6)
test_vector[(x==test_vector)|(y==test_vector)|(z==test_vector)]
test_vector[x== test_vector] | test_vector[y== test_vector]
save.image("C:/Users/jlowh/Documents/DSE5002/test.RData")
x <- 10
y <- 2
test_vector <- c(2,5,6)
z <- 6
test_vector[(x==test_vector)|(y==test_vector)|(z==test_vector)]
(x==test_vector)
(y==test_vector)
(z==test_vector)
test_vector[x== test_vector]
test_vector[y== test_vector]
(x==test_vector)
test_vector[x== test_vector]
test_vector[y== test_vector]
